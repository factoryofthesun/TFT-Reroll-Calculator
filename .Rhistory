# Reset input values if pressed
observeEvent(input$resetBtn, {
updateMatrixInput(session, "reroll_probs", og_prob_data)
updateMatrixInput(session, "chosen_probs", og_chosen_data)
updateMatrixInput(session, "num_units", og_num_units)
updateMatrixInput(session, "pool_size", og_unit_pool_size)
updateNumericInput(session, "chosen_prob", value = og_chosen_prob)
})
# ========= Outputs =============
# Plot panel
output$plot <- renderPlot({
distribution <- input$distribution
if(distribution == "pdf"){
plotPDF(distribution_data(), input$x_by)
}
else{
plotCDF(distribution_data(), input$x_by)
}
})
# Level or Reroll
output$lvl_str <- renderText({
paste("Player level:", input$player_lvl)
})
output$hit_str <- renderText({
if (input$condition == "chosen"){
"Looking to hit any of:"
} else{
paste("Looking to hit", input$condition, "of:")
}
})
output$scenario_descrip <- renderUI({
chosen_counts <- list()
# Loop through units and compile counts of chosen to hit
if (input$condition == "chosen"){
for (i in 1:length(unit_lvls())){
tier <- as.character(unit_lvls()[i])
if (!(tier %in% names(chosen_counts))){
chosen_counts[[tier]] <- 1
} else{
chosen_counts[[tier]] <- chosen_counts[[tier]] + 1
}
}
scenario_str <- paste0(chosen_counts, " different ", names(chosen_counts), "-cost", " chosen.")
}else{
scenario_str <- c()
for (i in 1:length(unit_lvls())){
tier <- unit_lvls()[i]
looking <- lookingFor()[i]
taken <- num_taken()[i]
init <- initial_state()[i]
num_tot <- UnitPoolSize[tier]
remaining <- num_tot - taken - init
unit_str <- paste0(looking,"/",remaining, " remaining copies of a tier ", tier)
scenario_str <- c(scenario_str, unit_str)
}
}
HTML(paste(scenario_str, collapse="<br/>"))
})
output$exp <- renderUI({
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
numericInput('init_exp', label=NULL, 0, min=0, max=tot_exp, step=1, width="100%")
})
output$totalExp <- renderText({
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
paste0("/", tot_exp)
})
output$lvlOrReroll <- renderUI({
# Analysis is useless at level 1 or 9
if (input$player_lvl == '1'){
HTML("You can't roll at level 1!")
}
else if(input$player_lvl == '9'){
HTML("9 is the highest level! Just donkey roll.")
}
else{
exp <- input$init_exp
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
validate(
need(exp >= 0 & exp < tot_exp, "Please enter valid starting exp.")
)
if (input$condition == "chosen"){
player_lvl <- as.integer(input$player_lvl)
no_lvl_shops <- getChosenExpectedShopsToHit(initial_state(), player_lvl, unit_lvls(), num_taken(), num_taken_other(),
chosen_probs(), pool_size(), num_units(), chosen_prob()) # Expected shops without leveling
} else{
no_lvl_shops <- getExpectedShopsToHit(one_slot_transition_mat(), absorb_cutoff()) # Expected shops without leveling
}
no_lvl_gold <- no_lvl_shops*2
no_lvl_str <- paste0("The expected cost of rolling without leveling is ", no_lvl_gold, ".")
# Need to generate slot matrix for one level above
player_lvl_up <- as.numeric(input$player_lvl) + 1
if (input$condition == "chosen"){
lvl_shops <- getChosenExpectedShopsToHit(initial_state(), player_lvl_up, unit_lvls(), num_taken(), num_taken_other(),
chosen_probs(), pool_size(), num_units(), chosen_prob()) # Expected shops without leveling
} else{
oneslotmat_up <- createOneSlotMatrix(ordered_perms(), absorb_cutoff(), player_lvl_up, unit_lvls(), num_taken(), num_taken_other(), initial_state(),
reroll_probs(), pool_size(), num_units())
lvl_shops <- getExpectedShopsToHit(oneslotmat_up, absorb_cutoff())
}
lvl_gold <- lvl_shops*2
gold_to_lvl <- ceiling((tot_exp-exp)/4)*4 # 4 gold for 4 exp
tot_lvl_gold <- lvl_gold + gold_to_lvl
lvl_str <- paste0("The expected cost of leveling and then rolling is ", tot_lvl_gold, ".")
if (no_lvl_gold < tot_lvl_gold){
res_str <- "<b> The gold-efficient strategy is to roll at your current level. <b>"
}
else{
res_str <- "<b> The gold-efficient strategy is to level then roll. <b>"
}
HTML(paste(c(no_lvl_str, lvl_str, res_str), collapse="<br/>"))
}
})
}
options(shiny.reactlog=T)
shinyApp(ui, server)
setwd("~/Documents/Code Projects/TFT stats/Reroll_Calculator")
setwd("D:/Code Projects/TFT stats/Reroll_Calculator")
rm(list=ls())
library(shiny)
library(shinycssloaders)
library(plotly)
library(shinyMatrix)
source("tft_reroll_calcs.R")
ui <- navbarPage("TFT Reroll Calculator (11.3) by HARVEST GOLEM",
tabPanel("Scenario Parameters",
fluidRow(
column(2, uiOutput("condition_choices")),
column(2, selectInput("player_lvl", "Player Level", choices=list("1"=1, "2"=2, "3"=3, "4"=4, "5"=5,
"6"=6, "7"=7, "8"=8, "9"=9)))
),
h4("# Other Units out of Tier Pools"),
fluidRow(
column(2, numericInput("other_out_1", "1", 0, min=0, step=1)),
column(2, numericInput("other_out_2", "2", 0, min=0, step=1)),
column(2, numericInput("other_out_3", "3", 0, min=0, step=1)),
column(2, numericInput("other_out_4", "4", 0, min=0, step=1)),
column(2, numericInput("other_out_5", "5", 0, min=0, step=1))
),
h4("Units to Hit (Limit 5)"),
conditionalPanel("input.condition == 'chosen'",
div("Note: The 'Chosen' condition computes the odds of hitting a chosen of any of the units below.
In this case only first 3 fields need to be filled out.", style="color:red")),
tags$div(id="unitrow_1",
fluidRow( #TODO: Make numeric options dynamically adjust to other choices (to limit picking out of bounds)
column(2, selectInput("unitlvl_1", "Unit Tier", choices=list("1"=1, "2"=2, "3"=3, "4"=4, "5"=5))),
column(2, numericInput("base_own_1", "Copies You Own", 0, min=0, step=1)),
column(2, numericInput("others_own_1", "Copies Others Own", 0, min=0, step=1)),
column(2, numericInput("copies_wanted_1", "Copies Looking For", 1, min=1, step=1)),
column(2, div(style="margin-top:20px", checkboxInput("chosen_1", "Take Chosen", value = F)))
)
),
fluidRow(column(1, offset=6, actionButton('addUnitBtn', "Add Unit", style='width:90%'), style='padding:0px'),
column(1, actionButton('removeUnitBtn', "Remove Unit", style='width:90%'), style='padding:0px'))
),
tabPanel("Plot",
sidebarPanel(
h3("Plot Settings"),
radioButtons("distribution", "Distribution", choices=list("PDF"="pdf", "CDF"="cdf")),
radioButtons("x_by", "X-Axis Value", choices=list("Shops", "Gold"), selected='Shops')
),
mainPanel(
withSpinner(plotOutput("plot"))
)
),
tabPanel("Level or Reroll?",
sidebarPanel(
tags$b(textOutput('lvl_str')),
br(),
tags$b(textOutput('hit_str')),
htmlOutput("scenario_descrip"),
br(),
fluidRow(column(1, tags$b(div("Exp: ", style='padding-top:5px')), style='padding-right:0px'), column(2, uiOutput("exp"), style='padding:0px'),
column(1, div(textOutput("totalExp"), style='padding-top:7px'), style='padding:0px')
)),
mainPanel(
withSpinner(htmlOutput("lvlOrReroll"))
)),
tabPanel("Change Pool Size/Probabilities",
column(12, tags$b("Reroll Probabilities"), align="center"),
matrixInput("reroll_probs", value=ShopProbMat, rows=list(names=TRUE), cols=list(names=TRUE), class="numeric"),
column(12, tags$b("Chosen Probabilities"), align="center"),
matrixInput("chosen_probs", value=ChosenProbMat, rows=list(names=TRUE), cols=list(names=TRUE), class="numeric"),
fluidRow(column(6, matrixInput("num_units", value=NumUnits, cols=list(names=T), rows=list(names=T), class="numeric")),
column(6, matrixInput("pool_size", value=UnitPoolSize, cols=list(names=T), rows=list(names=T), class="numeric"))),
fluidRow(column(2, numericInput("chosen_prob", label = "P(Chosen)", value=ChosenProb, min=0, max=1, step=0.01))),
fluidRow(column(1, actionButton('resetBtn', "Reset", style='width:90%'), style='padding:0px'))
)
)
server <- function(input, output, session){
# ====== Dynamic UI =======
# Add unit rows
unit_rows <- c("unitrow_1")
observeEvent(input$addUnitBtn, {
# Cap at 5 units for now: matrix calculation gets too slow after that
if (length(unit_rows) < 5){
row_num <- input$addUnitBtn + 1
row_num_id <- paste0("unitrow_", row_num)
insertUI(
selector= paste0("#", unit_rows[length(unit_rows)]),
where="afterEnd",
ui= tags$div(id = row_num_id,
fluidRow( #TODO: Make numeric options dynamically adjust to other choices (to limit picking out of bounds)
column(2, selectInput(paste0("unitlvl_", row_num), "Unit Tier", choices=list("1"=1, "2"=2, "3"=3, "4"=4, "5"=5))),
column(2, numericInput(paste0("base_own_", row_num), "Copies You Own", 0, min=0, step=1)),
column(2, numericInput(paste0("others_own_", row_num), "Copies Others Own", 0, min=0, step=1)),
column(2, numericInput(paste0("copies_wanted_", row_num), "Copies Looking For", 1, min=1, step=1)),
column(2, div(style="margin-top:20px",checkboxInput(paste0("chosen_", row_num), "Take Chosen", value = F)))
))
)
unit_rows <<- c(unit_rows, row_num_id)
}
})
observeEvent(input$removeUnitBtn, {
# Never remove the first row
if(length(unit_rows) > 1){
removeUI(
selector = paste0("#", unit_rows[length(unit_rows)])
)
unit_rows <<- unit_rows[-length(unit_rows)]
}
})
# Alter condition options based on # units
output$condition_choices <- renderUI({
# Set dependencies
row_num <- input$addUnitBtn
row_neg <- input$removeUnitBtn
conditions <- c("chosen", "all", "any")
names <- c("Chosen", "All", "Any")
if (length(unit_rows) > 2){ # Any 2, ..., Any N-1
conditions_add <- sapply(2:(length(unit_rows)-1), function(x) paste("any", x))
conditions <- c(conditions, conditions_add)
names_add <- sapply(2:(length(unit_rows)-1), function(x) paste("Any", x))
names <- c(names, names_add)
}
conditions <- setNames(as.list(conditions), names)
selectInput("condition", "Hit Condition", choices=conditions)
})
# Partially hide some of the fluidrow columns if "chosen" scenario is selected
output$chosen_selected <- reactive({
input$condition == "chosen"
})
# ====== Parameters for Matrix Computation =======
# Include calls to action button clicks so the values update appropriately whenever rows added/deleted
lookingFor <- reactive({
ret_looking <- c()
addbtn <- input$addUnitBtn
rembtn <- input$removeUnitBtn
for(row_ids in unit_rows){
row_num <- sub("unitrow_", "", row_ids)
wanted_id <- paste0("copies_wanted_", row_num)
wanted_i <- input[[wanted_id]]
validate(
need(wanted_i, "Please finish filling out the scenario parameters.")
)
ret_looking <- c(ret_looking, wanted_i)
}
ret_looking
})
num_taken <- reactive({
ret_num_taken <- c()
addbtn <- input$addUnitBtn
rembtn <- input$removeUnitBtn
for(row_ids in unit_rows){
row_num <- sub("unitrow_", "", row_ids)
others_own_id <- paste0("others_own_", row_num)
others_own_i <- input[[others_own_id]]
validate(
need(others_own_i, "Please finish filling out the scenario parameters.")
)
ret_num_taken <- c(ret_num_taken, others_own_i)
}
ret_num_taken
})
unit_lvls <- reactive({
ret_unit_lvls <- c()
addbtn <- input$addUnitBtn
rembtn <- input$removeUnitBtn
for(row_ids in unit_rows){
row_num <- sub("unitrow_", "", row_ids)
unit_lvl_id <- paste0("unitlvl_", row_num)
unit_lvl_i <- as.numeric(input[[unit_lvl_id]])
validate(
need(unit_lvl_i, "Please finish filling out the scenario parameters.")
)
ret_unit_lvls <- c(ret_unit_lvls, unit_lvl_i)
}
ret_unit_lvls
})
initial_state <- reactive({
ret_initial_state <- c()
addbtn <- input$addUnitBtn
rembtn <- input$removeUnitBtn
for(row_ids in unit_rows){
row_num <- sub("unitrow_", "", row_ids)
initial_state_id <- paste0("base_own_", row_num)
initial_state_i <- input[[initial_state_id]]
validate(
need(initial_state_i, "Please finish filling out the scenario parameters.")
)
ret_initial_state <- c(ret_initial_state, initial_state_i)
}
ret_initial_state
})
num_chosen <- reactive({
num_chosen <- 0
addbtn <- input$addUnitBtn
rembtn <- input$removeUnitBtn
for(row_ids in unit_rows){
row_num <- sub("unitrow_", "", row_ids)
chosen_id <- paste0("chosen_", row_num)
chosen_i <- input[[chosen_id]]
validate(
need(is.logical(chosen_i), "Please finish filling out the scenario parameters.")
)
num_chosen <- num_chosen + chosen_i
}
num_chosen
})
ordered_ret <- reactive({getOrderedPermutations(lookingFor(), input$condition, num_chosen())})
ordered_perms <- reactive({ordered_ret()[[1]]})
absorb_cutoff <- reactive({ordered_ret()[[2]]})
num_taken_other <- reactive({
other_ret <- c(input$other_out_1, input$other_out_2, input$other_out_3, input$other_out_4,
input$other_out_5)
validate(
need(!anyNA(other_ret), "Please finish filling out the scenario parameters.")
)
other_ret
})
error_check <- reactive({ # Error handling function (don't generate matrix until this is passed!)
player_lvl <- as.numeric(input$player_lvl)
if (input$condition == "chosen"){
validate_list <- validateChosenScenario(player_lvl, num_taken_other(), unit_lvls(), num_taken(), initial_state(),
chosen_probs(), pool_size(), num_units(), num_chosen())
} else{
validate_list <- validateScenario(player_lvl, num_taken_other(), unit_lvls(), num_taken(), lookingFor(), initial_state(),
reroll_probs(), chosen_probs(), pool_size(), num_units(), num_chosen())
}
validate_status <- validate_list[[1]]
validate_msg <- validate_list[[2]]
validate(
need(validate_status, validate_msg)
)
})
one_slot_transition_mat <- reactive({
error_check()
player_lvl <- as.numeric(input$player_lvl)
createOneSlotMatrix(ordered_perms(), absorb_cutoff(), player_lvl, unit_lvls(), num_taken(), num_taken_other(),
initial_state(), reroll_probs(), chosen_probs(), pool_size(), num_units(), num_chosen())
})
distribution_data <- reactive({
error_check()
player_lvl <- as.numeric(input$player_lvl)
if (input$condition == "chosen"){
generateChosenDistributionData(initial_state(), player_lvl, unit_lvls(), num_taken(), num_taken_other(),
chosen_probs(), pool_size(), num_units(), chosen_prob())
} else{
generateDistributionData(one_slot_transition_mat(), absorb_cutoff())
}
})
# ====== Dynamic base probabilities/pool size =======
og_prob_data <- ShopProbMat # Save original copies of everything so we can reset
og_chosen_data <- ChosenProbMat
og_num_units <- NumUnits
og_unit_pool_size <- UnitPoolSize
og_chosen_prob <- ChosenProb
# Make sure nothing is left blank
reroll_probs <- reactive({
validate(
need(!anyNA(input$reroll_probs), "Please finish filling out reroll probabilities.")
)
input$reroll_probs
})
chosen_probs <- reactive({
validate(
need(!anyNA(input$chosen_probs), "Please finish filling out chosen probabilities.")
)
input$chosen_probs
})
num_units <- reactive({
validate(
need(!anyNA(input$num_units), "Please finish filling out the unit tier count.")
)
input$num_units
})
pool_size <- reactive({
validate(
need(!anyNA(input$pool_size), "Please finish filling out the pool size.")
)
input$pool_size
})
chosen_prob <- reactive({
validate(
need(!anyNA(input$chosen_prob), "Please finish filling out the base chosen probability.")
)
input$chosen_prob
})
# Reset input values if pressed
observeEvent(input$resetBtn, {
updateMatrixInput(session, "reroll_probs", og_prob_data)
updateMatrixInput(session, "chosen_probs", og_chosen_data)
updateMatrixInput(session, "num_units", og_num_units)
updateMatrixInput(session, "pool_size", og_unit_pool_size)
updateNumericInput(session, "chosen_prob", value = og_chosen_prob)
})
# ========= Outputs =============
# Plot panel
output$plot <- renderPlot({
distribution <- input$distribution
if(distribution == "pdf"){
plotPDF(distribution_data(), input$x_by)
}
else{
plotCDF(distribution_data(), input$x_by)
}
})
# Level or Reroll
output$lvl_str <- renderText({
paste("Player level:", input$player_lvl)
})
output$hit_str <- renderText({
if (input$condition == "chosen"){
"Looking to hit any of:"
} else{
paste("Looking to hit", input$condition, "of:")
}
})
output$scenario_descrip <- renderUI({
chosen_counts <- list()
# Loop through units and compile counts of chosen to hit
if (input$condition == "chosen"){
for (i in 1:length(unit_lvls())){
tier <- as.character(unit_lvls()[i])
if (!(tier %in% names(chosen_counts))){
chosen_counts[[tier]] <- 1
} else{
chosen_counts[[tier]] <- chosen_counts[[tier]] + 1
}
}
scenario_str <- paste0(chosen_counts, " different ", names(chosen_counts), "-cost", " chosen.")
}else{
scenario_str <- c()
for (i in 1:length(unit_lvls())){
tier <- unit_lvls()[i]
looking <- lookingFor()[i]
taken <- num_taken()[i]
init <- initial_state()[i]
num_tot <- UnitPoolSize[tier]
remaining <- num_tot - taken - init
unit_str <- paste0(looking,"/",remaining, " remaining copies of a tier ", tier)
scenario_str <- c(scenario_str, unit_str)
}
}
HTML(paste(scenario_str, collapse="<br/>"))
})
output$exp <- renderUI({
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
numericInput('init_exp', label=NULL, 0, min=0, max=tot_exp, step=1, width="100%")
})
output$totalExp <- renderText({
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
paste0("/", tot_exp)
})
output$lvlOrReroll <- renderUI({
# Analysis is useless at level 1 or 9
if (input$player_lvl == '1'){
HTML("You can't roll at level 1!")
}
else if(input$player_lvl == '9'){
HTML("9 is the highest level! Just donkey roll.")
}
else{
exp <- input$init_exp
tot_exp <- getExpToLevel(as.numeric(input$player_lvl), ExpToLevel)
validate(
need(exp >= 0 & exp < tot_exp, "Please enter valid starting exp.")
)
if (input$condition == "chosen"){
player_lvl <- as.integer(input$player_lvl)
no_lvl_shops <- getChosenExpectedShopsToHit(initial_state(), player_lvl, unit_lvls(), num_taken(), num_taken_other(),
chosen_probs(), pool_size(), num_units(), chosen_prob()) # Expected shops without leveling
} else{
no_lvl_shops <- getExpectedShopsToHit(one_slot_transition_mat(), absorb_cutoff()) # Expected shops without leveling
}
no_lvl_gold <- no_lvl_shops*2
no_lvl_str <- paste0("The expected cost of rolling without leveling is ", no_lvl_gold, ".")
# Need to generate slot matrix for one level above
player_lvl_up <- as.numeric(input$player_lvl) + 1
if (input$condition == "chosen"){
lvl_shops <- getChosenExpectedShopsToHit(initial_state(), player_lvl_up, unit_lvls(), num_taken(), num_taken_other(),
chosen_probs(), pool_size(), num_units(), chosen_prob()) # Expected shops without leveling
} else{
oneslotmat_up <- createOneSlotMatrix(ordered_perms(), absorb_cutoff(), player_lvl_up, unit_lvls(), num_taken(), num_taken_other(), initial_state(),
reroll_probs(), pool_size(), num_units())
lvl_shops <- getExpectedShopsToHit(oneslotmat_up, absorb_cutoff())
}
lvl_gold <- lvl_shops*2
gold_to_lvl <- ceiling((tot_exp-exp)/4)*4 # 4 gold for 4 exp
tot_lvl_gold <- lvl_gold + gold_to_lvl
lvl_str <- paste0("The expected cost of leveling and then rolling is ", tot_lvl_gold, ".")
if (no_lvl_gold < tot_lvl_gold){
res_str <- "<b> The gold-efficient strategy is to roll at your current level. <b>"
}
else{
res_str <- "<b> The gold-efficient strategy is to level then roll. <b>"
}
HTML(paste(c(no_lvl_str, lvl_str, res_str), collapse="<br/>"))
}
})
}
options(shiny.reactlog=T)
shinyApp(ui, server)
